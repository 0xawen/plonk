(function() {var implementors = {};
implementors["dusk_plonk"] = [{"text":"impl RefUnwindSafe for Proof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AggregateProof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Commitment","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PolyCommitSchemeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KZG10Errors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpeningKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommitKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardComposer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WireData","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProvingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreProcessingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Point","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointScalar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EvaluationDomain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Evaluations","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Polynomial","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FFTError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FFTErrors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProverKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerifierKey","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProofError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProofErrors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Proof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Prover","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Verifier","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()